#ifndef _MATRIXOPERATIONS_CUT_
#define _MATRIXOPERATIONS_CUT_

template <>
template <typename UnaryOperation>
void MatrixOperations<HostMatrix>::transform(HostMatrix& matrix, UnaryOperation op) {
    for (unsigned int i = 0; i < matrix.getHeight(); ++i) {
        for (unsigned int j = 0; j < matrix.getWidth(); ++j) {
            matrix.setElement(i, j, op(matrix.getElement(i, j)));
        }
    }
}

template <typename UnaryOperation>
__global__
void _transform(float* matrix, unsigned int m, unsigned int n, UnaryOperation op) {
    unsigned int global_i = threadIdx.y + blockIdx.y * blockDim.y;
    unsigned int global_j = threadIdx.x + blockIdx.x * blockDim.x;

    if (global_i < m && global_j < n) {
        matrix[global_i * n + global_j] = op(matrix[global_i * n + global_j]);
    }
}

template <>
template <typename UnaryOperation>
void MatrixOperations<DeviceMatrix>::transform(DeviceMatrix& matrix, UnaryOperation op) {
    const unsigned int BLOCK_SIZE = 32;

    dim3 blockDim(BLOCK_SIZE, BLOCK_SIZE);
    dim3 gridDim((matrix.getWidth() + BLOCK_SIZE - 1) / BLOCK_SIZE,
        (matrix.getHeight() + BLOCK_SIZE - 1) / BLOCK_SIZE);
    _transform<<<gridDim, blockDim>>>(matrix.getElements(), matrix.getHeight(), matrix.getWidth(), op);
}

#endif
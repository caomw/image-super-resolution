#ifndef _NEURALNET_CUT_
#define _NEURALNET_CUT_

template <typename MatrixType>
MatrixType NeuralNet<MatrixType>::predict(const MatrixType& instances) const {
    if (!initialized) {
        throw std::invalid_argument("Invalid argument.");
    } else {
        MatrixType inMat, outMat;

        inMat = MatrixOperations<MatrixType>::padRowsTop(instances, 1, 1.0f);
        outMat = MatrixOperations<MatrixType>::combineInnerProduct(weightsIn, inMat,
            Multiply(), Add(), Sigmoid(), 0.0f);
        inMat = MatrixOperations<MatrixType>::padRowsTop(outMat, 1, 1.0f);
        outMat = MatrixOperations<MatrixType>::multiply(weightsOut, inMat);
        
        return outMat;
    }
}

#endif
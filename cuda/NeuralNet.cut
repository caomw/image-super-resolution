#ifndef _NEURALNET_CUT_
#define _NEURALNET_CUT_

template <typename MatrixType>
MatrixType NeuralNet<MatrixType>::predict(const MatrixType& instances) {
    if (!initialized) {
        throw std::invalid_argument("Invalid argument.");
    } else {
        MatrixType rowVec, inMat, outMat;

        rowVec = MatrixType(1, instances.getWidth());
        MatrixOperations<MatrixType>::fill(rowVec, 1.0f);
        inMat = MatrixOperations<MatrixType>::concatenateRows(rowVec, instances);
        outMat = MatrixOperations<MatrixType>::multiply(weightsIn, inMat);
        MatrixOperations<MatrixType>::transform(outMat, Sigmoid());

        rowVec = MatrixType(1, outMat.getWidth());
        MatrixOperations<MatrixType>::fill(rowVec, 1.0f);
        inMat = MatrixOperations<MatrixType>::concatenateRows(rowVec, outMat);
        outMat = MatrixOperations<MatrixType>::multiply(weightsOut, inMat);
        return outMat;
    }
}

#endif